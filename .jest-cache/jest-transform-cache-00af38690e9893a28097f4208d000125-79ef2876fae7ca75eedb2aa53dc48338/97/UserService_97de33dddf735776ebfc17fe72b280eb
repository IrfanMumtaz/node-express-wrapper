0809d20cf6d33be7db383e28874b66e0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseService_1 = __importDefault(require("./BaseService"));
const User_1 = __importDefault(require("@models/User"));
const UserRequest_1 = __importDefault(require("@requests/UserRequest"));
class UserService extends BaseService_1.default {
    async getAllUsers() {
        return this.execute(async () => {
            const users = await User_1.default.query().get();
            return users.toArray();
        });
    }
    async createUser(userData) {
        return this.execute(async () => {
            // Validate input data
            const validatedData = this.validateData(userData, UserRequest_1.default);
            // Check if user already exists
            const existingUser = await User_1.default.query()
                .where('name', validatedData.name)
                .first();
            if (existingUser) {
                throw new Error('User with this name already exists');
            }
            // Create new user
            const user = new User_1.default(validatedData);
            const savedUser = await user.save();
            return savedUser;
        });
    }
    async getUserById(id) {
        return this.execute(async () => {
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            return user;
        });
    }
    async updateUser(id, userData) {
        return this.execute(async () => {
            const validatedData = this.validateData(userData, UserRequest_1.default);
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            // Update user
            Object.assign(user, validatedData);
            const savedUser = await user.save();
            return savedUser;
        });
    }
    async deleteUser(id) {
        return this.execute(async () => {
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            await user.delete();
            return { message: 'User deleted successfully' };
        });
    }
}
exports.default = UserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXEZyZWVsYW5jZXJcXG5vZGVqcy1hcGktd3JhcHBlclxcc3JjXFxzZXJ2aWNlc1xcVXNlclNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBd0M7QUFDeEMsd0RBQWdDO0FBQ2hDLHdFQUFnRDtBQUdoRCxNQUFNLFdBQVksU0FBUSxxQkFBVztJQUNuQyxLQUFLLENBQUMsV0FBVztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QyxPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQWlCLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUE0QjtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0Isc0JBQXNCO1lBQ3RCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQVksUUFBUSxFQUFFLHFCQUFXLENBQUMsQ0FBQztZQUUxRSwrQkFBK0I7WUFDL0IsTUFBTSxZQUFZLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFO2lCQUNwQyxLQUFLLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7aUJBQ2pDLEtBQUssRUFBRSxDQUFDO1lBRVgsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1lBQ3hELENBQUM7WUFFRCxrQkFBa0I7WUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDckMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEMsT0FBTyxTQUFpQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBVTtRQUMxQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUVELE9BQU8sSUFBaUIsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUNkLEVBQVUsRUFDVixRQUE0QjtRQUU1QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBWSxRQUFRLEVBQUUscUJBQVcsQ0FBQyxDQUFDO1lBRTFFLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU3QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7WUFFRCxjQUFjO1lBQ2QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDbkMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEMsT0FBTyxTQUFpQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBVTtRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUVELE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3BCLE9BQU8sRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELGtCQUFlLFdBQVcsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJFOlxcRnJlZWxhbmNlclxcbm9kZWpzLWFwaS13cmFwcGVyXFxzcmNcXHNlcnZpY2VzXFxVc2VyU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZVNlcnZpY2UgZnJvbSAnLi9CYXNlU2VydmljZSc7XG5pbXBvcnQgVXNlciBmcm9tICdAbW9kZWxzL1VzZXInO1xuaW1wb3J0IFVzZXJSZXF1ZXN0IGZyb20gJ0ByZXF1ZXN0cy9Vc2VyUmVxdWVzdCc7XG5pbXBvcnQgeyBVc2VyTW9kZWwgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNsYXNzIFVzZXJTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBhc3luYyBnZXRBbGxVc2VycygpOiBQcm9taXNlPFVzZXJNb2RlbFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VycyA9IGF3YWl0IFVzZXIucXVlcnkoKS5nZXQoKTtcbiAgICAgIHJldHVybiB1c2Vycy50b0FycmF5KCkgYXMgVXNlck1vZGVsW107XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVVc2VyKHVzZXJEYXRhOiBQYXJ0aWFsPFVzZXJNb2RlbD4pOiBQcm9taXNlPFVzZXJNb2RlbD4ge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVmFsaWRhdGUgaW5wdXQgZGF0YVxuICAgICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IHRoaXMudmFsaWRhdGVEYXRhPFVzZXJNb2RlbD4odXNlckRhdGEsIFVzZXJSZXF1ZXN0KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAgIC53aGVyZSgnbmFtZScsIHZhbGlkYXRlZERhdGEubmFtZSlcbiAgICAgICAgLmZpcnN0KCk7XG5cbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBuZXcgdXNlclxuICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHZhbGlkYXRlZERhdGEpO1xuICAgICAgY29uc3Qgc2F2ZWRVc2VyID0gYXdhaXQgdXNlci5zYXZlKCk7XG4gICAgICByZXR1cm4gc2F2ZWRVc2VyIGFzIHVua25vd24gYXMgVXNlck1vZGVsO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0VXNlckJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpLmZpbmRCeUlkKGlkKTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlTm90Rm91bmQoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1c2VyIGFzIFVzZXJNb2RlbDtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVVzZXIoXG4gICAgaWQ6IG51bWJlcixcbiAgICB1c2VyRGF0YTogUGFydGlhbDxVc2VyTW9kZWw+XG4gICk6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gdGhpcy52YWxpZGF0ZURhdGE8VXNlck1vZGVsPih1c2VyRGF0YSwgVXNlclJlcXVlc3QpO1xuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpLmZpbmRCeUlkKGlkKTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlTm90Rm91bmQoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSB1c2VyXG4gICAgICBPYmplY3QuYXNzaWduKHVzZXIsIHZhbGlkYXRlZERhdGEpO1xuICAgICAgY29uc3Qgc2F2ZWRVc2VyID0gYXdhaXQgdXNlci5zYXZlKCk7XG4gICAgICByZXR1cm4gc2F2ZWRVc2VyIGFzIHVua25vd24gYXMgVXNlck1vZGVsO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlVXNlcihpZDogbnVtYmVyKTogUHJvbWlzZTx7IG1lc3NhZ2U6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpLmZpbmRCeUlkKGlkKTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlTm90Rm91bmQoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHVzZXIuZGVsZXRlKCk7XG4gICAgICByZXR1cm4geyBtZXNzYWdlOiAnVXNlciBkZWxldGVkIHN1Y2Nlc3NmdWxseScgfTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyU2VydmljZTtcbiJdLCJ2ZXJzaW9uIjozfQ==