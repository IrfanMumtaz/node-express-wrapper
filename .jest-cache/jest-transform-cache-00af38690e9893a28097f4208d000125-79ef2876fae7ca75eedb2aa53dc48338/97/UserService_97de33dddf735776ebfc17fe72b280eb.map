{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\UserService.ts","mappings":";;;;;AAAA,gEAAwC;AACxC,wDAAgC;AAChC,wEAAgD;AAGhD,MAAM,WAAY,SAAQ,qBAAW;IACnC,KAAK,CAAC,WAAW;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YAC7B,MAAM,KAAK,GAAG,MAAM,cAAI,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;YACvC,OAAO,KAAK,CAAC,OAAO,EAAiB,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAA4B;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YAC7B,sBAAsB;YACtB,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAY,QAAQ,EAAE,qBAAW,CAAC,CAAC;YAE1E,+BAA+B;YAC/B,MAAM,YAAY,GAAG,MAAM,cAAI,CAAC,KAAK,EAAE;iBACpC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC;iBACjC,KAAK,EAAE,CAAC;YAEX,IAAI,YAAY,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACxD,CAAC;YAED,kBAAkB;YAClB,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,aAAa,CAAC,CAAC;YACrC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACpC,OAAO,SAAiC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YAC7B,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE7C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YACxC,CAAC;YAED,OAAO,IAAiB,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CACd,EAAU,EACV,QAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YAC7B,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAY,QAAQ,EAAE,qBAAW,CAAC,CAAC;YAE1E,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE7C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YACxC,CAAC;YAED,cAAc;YACd,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YACnC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACpC,OAAO,SAAiC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU;QACzB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;YAC7B,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE7C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACpB,OAAO,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\UserService.ts"],"sourcesContent":["import BaseService from './BaseService';\nimport User from '@models/User';\nimport UserRequest from '@requests/UserRequest';\nimport { UserModel } from '../types';\n\nclass UserService extends BaseService {\n  async getAllUsers(): Promise<UserModel[]> {\n    return this.execute(async () => {\n      const users = await User.query().get();\n      return users.toArray() as UserModel[];\n    });\n  }\n\n  async createUser(userData: Partial<UserModel>): Promise<UserModel> {\n    return this.execute(async () => {\n      // Validate input data\n      const validatedData = this.validateData<UserModel>(userData, UserRequest);\n\n      // Check if user already exists\n      const existingUser = await User.query()\n        .where('name', validatedData.name)\n        .first();\n\n      if (existingUser) {\n        throw new Error('User with this name already exists');\n      }\n\n      // Create new user\n      const user = new User(validatedData);\n      const savedUser = await user.save();\n      return savedUser as unknown as UserModel;\n    });\n  }\n\n  async getUserById(id: number): Promise<UserModel> {\n    return this.execute(async () => {\n      const user = await User.query().findById(id);\n\n      if (!user) {\n        this.handleNotFound('User not found');\n      }\n\n      return user as UserModel;\n    });\n  }\n\n  async updateUser(\n    id: number,\n    userData: Partial<UserModel>\n  ): Promise<UserModel> {\n    return this.execute(async () => {\n      const validatedData = this.validateData<UserModel>(userData, UserRequest);\n\n      const user = await User.query().findById(id);\n\n      if (!user) {\n        this.handleNotFound('User not found');\n      }\n\n      // Update user\n      Object.assign(user, validatedData);\n      const savedUser = await user.save();\n      return savedUser as unknown as UserModel;\n    });\n  }\n\n  async deleteUser(id: number): Promise<{ message: string }> {\n    return this.execute(async () => {\n      const user = await User.query().findById(id);\n\n      if (!user) {\n        this.handleNotFound('User not found');\n      }\n\n      await user.delete();\n      return { message: 'User deleted successfully' };\n    });\n  }\n}\n\nexport default UserService;\n"],"version":3}