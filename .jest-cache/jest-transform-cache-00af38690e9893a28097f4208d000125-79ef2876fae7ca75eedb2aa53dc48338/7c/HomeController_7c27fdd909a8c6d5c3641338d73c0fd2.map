{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\controllers\\HomeController.ts","mappings":";;;;;AAAA,8DAAsC;AACtC,kFAA0D;AAC1D,2EAAmD;AACnD,iFAAyD;AAGzD,MAAM,cAAe,SAAQ,oBAAU;IAGrC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,yBAAe,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,qBAAqB,CACzB,IAAoB,EACpB,GAAoB;QAEpB,OAAO,IAAI,CAAC,WAAW,CACrB,IAAI,EACJ,GAAG,EACH,KAAK,EAAE,IAAoB,EAAE,GAAoB,EAAE,EAAE;YACnD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;YACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,sBAAY,CAAC,KAAK,CAAQ,CAAC,CAAC;QAC5D,CAAC,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,GAAmB,EACnB,GAAoB;QAEpB,OAAO,IAAI,CAAC,WAAW,CACrB,GAAG,EACH,GAAG,EACH,KAAK,EAAE,IAAoB,EAAE,GAAoB,EAAE,EAAE;YACnD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC,QAAQ,CAClB,GAAG,EACH,IAAI,sBAAY,CAAC,IAAI,CAAQ,EAC7B,GAAG,EACH,2BAA2B,CAC5B,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,GAAmB,EACnB,GAAoB;QAEpB,OAAO,IAAI,CAAC,WAAW,CACrB,GAAG,EACH,GAAG,EACH,KAAK,EAAE,IAAoB,EAAE,IAAqB,EAAE,EAAE;YACpD,MAAM,yBAAe,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACjD,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AAED,kBAAe,cAAc,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\controllers\\HomeController.ts"],"sourcesContent":["import Controller from './Controller';\nimport SampleException from '@exceptions/SampleException';\nimport HomeResource from '@resources/HomeResource';\nimport ServiceRegistry from '@container/ServiceRegistry';\nimport { ExpressRequest, ExpressResponse } from '../types';\n\nclass HomeController extends Controller {\n  private userService: any;\n\n  constructor() {\n    super();\n    this.userService = ServiceRegistry.getService('UserService');\n  }\n\n  async getCollectionResponse(\n    _req: ExpressRequest,\n    res: ExpressResponse\n  ): Promise<void> {\n    return this.handleAsync(\n      _req,\n      res,\n      async (_req: ExpressRequest, res: ExpressResponse) => {\n        const users = await this.userService.getAllUsers();\n        return this.response(res, new HomeResource(users) as any);\n      }\n    );\n  }\n\n  async getSingleResponse(\n    req: ExpressRequest,\n    res: ExpressResponse\n  ): Promise<void> {\n    return this.handleAsync(\n      req,\n      res,\n      async (_req: ExpressRequest, res: ExpressResponse) => {\n        const user = await this.userService.createUser(req.body);\n        return this.response(\n          res,\n          new HomeResource(user) as any,\n          201,\n          'User created successfully'\n        );\n      }\n    );\n  }\n\n  async getErrorResponse(\n    req: ExpressRequest,\n    res: ExpressResponse\n  ): Promise<void> {\n    return this.handleAsync(\n      req,\n      res,\n      async (_req: ExpressRequest, _res: ExpressResponse) => {\n        throw SampleException.sample('Test Exception');\n      }\n    );\n  }\n}\n\nexport default HomeController;\n"],"version":3}