{"file":"E:\\Freelancer\\nodejs-api-wrapper\\tests\\controllers\\HomeController.test.ts","mappings":"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","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\tests\\controllers\\HomeController.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport HomeController from '@controllers/HomeController';\nimport User from '@models/User';\nimport UserService from '@services/UserService';\nimport { MockRequest, MockResponse } from '../../src/types';\n\n// Mock the User model and UserService\njest.mock('@models/User');\njest.mock('@services/UserService');\n\ndescribe('HomeController', () => {\n  let app: express.Application;\n  let homeController: HomeController;\n  let mockUserService: jest.Mocked<UserService>;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    homeController = new HomeController();\n\n    // Get the mocked UserService instance\n    mockUserService = (homeController as any).userService;\n\n    // Clear all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('getCollectionResponse', () => {\n    it('should return collection of users successfully', async () => {\n      const mockUsers = [\n        { id: 1, name: 'John Doe' },\n        { id: 2, name: 'Jane Smith' },\n      ];\n\n      mockUserService.getAllUsers = jest.fn().mockResolvedValue(mockUsers);\n\n      const req: MockRequest = {};\n      const res: MockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      };\n\n      await homeController.getCollectionResponse(req as any, res as any);\n\n      expect(mockUserService.getAllUsers).toHaveBeenCalled();\n      expect(res.status).toHaveBeenCalledWith(200);\n      expect(res.json).toHaveBeenCalledWith({\n        data: expect.any(Object),\n        error: {},\n        success: true,\n        message: 'Operation Successful',\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const error = new Error('Database connection failed');\n      mockUserService.getAllUsers = jest.fn().mockRejectedValue(error);\n\n      const req: MockRequest = {};\n      const res: MockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      };\n\n      await homeController.getCollectionResponse(req as any, res as any);\n\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith({\n        data: {},\n        error: {\n          message: 'Database connection failed',\n          code: 500,\n        },\n        success: false,\n        message: 'Database connection failed',\n      });\n    });\n  });\n\n  describe('getSingleResponse', () => {\n    it('should create and return a new user successfully', async () => {\n      const mockUser = { id: 1, name: 'John Doe' };\n      mockUserService.createUser = jest.fn().mockResolvedValue(mockUser);\n\n      const req: MockRequest = {\n        body: { name: 'John Doe' },\n      };\n      const res: MockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      };\n\n      await homeController.getSingleResponse(req as any, res as any);\n\n      expect(mockUserService.createUser).toHaveBeenCalledWith({\n        name: 'John Doe',\n      });\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith({\n        data: expect.any(Object),\n        error: {},\n        success: true,\n        message: 'User created successfully',\n      });\n    });\n\n    it('should handle validation errors', async () => {\n      const error = new Error('Validation failed');\n      (error as any).status = 422;\n      mockUserService.createUser = jest.fn().mockRejectedValue(error);\n\n      const req: MockRequest = {\n        body: { name: '' },\n      };\n      const res: MockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      };\n\n      await homeController.getSingleResponse(req as any, res as any);\n\n      expect(res.status).toHaveBeenCalledWith(422);\n      expect(res.json).toHaveBeenCalledWith({\n        data: {},\n        error: {\n          message: 'Validation failed',\n          code: 422,\n        },\n        success: false,\n        message: 'Validation failed',\n      });\n    });\n  });\n\n  describe('getErrorResponse', () => {\n    it('should throw sample exception for testing', async () => {\n      const req: MockRequest = {};\n      const res: MockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      };\n\n      await homeController.getErrorResponse(req as any, res as any);\n\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({\n        data: {},\n        error: {\n          message: 'Test Exception',\n          code: 422,\n        },\n        success: false,\n        message: 'Test Exception',\n      });\n    });\n  });\n});\n"],"version":3}