c4629460cdaf4997fb1f9f8ab017f11f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the User model and UserService
jest.mock('@models/User');
jest.mock('@services/UserService');
const express_1 = __importDefault(require("express"));
const HomeController_1 = __importDefault(require("@controllers/HomeController"));
describe('HomeController', () => {
    let app;
    let homeController;
    let mockUserService;
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        homeController = new HomeController_1.default();
        // Get the mocked UserService instance
        mockUserService = homeController.userService;
        // Clear all mocks
        jest.clearAllMocks();
    });
    describe('getCollectionResponse', () => {
        it('should return collection of users successfully', async () => {
            const mockUsers = [
                { id: 1, name: 'John Doe' },
                { id: 2, name: 'Jane Smith' },
            ];
            mockUserService.getAllUsers = jest.fn().mockResolvedValue(mockUsers);
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };
            await homeController.getCollectionResponse(req, res);
            expect(mockUserService.getAllUsers).toHaveBeenCalled();
            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({
                data: expect.any(Object),
                error: {},
                success: true,
                message: 'Operation Successful',
            });
        });
        it('should handle database errors gracefully', async () => {
            const error = new Error('Database connection failed');
            mockUserService.getAllUsers = jest.fn().mockRejectedValue(error);
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };
            await homeController.getCollectionResponse(req, res);
            expect(res.status).toHaveBeenCalledWith(500);
            expect(res.json).toHaveBeenCalledWith({
                data: {},
                error: {
                    message: 'Database connection failed',
                    code: 500,
                },
                success: false,
                message: 'Database connection failed',
            });
        });
    });
    describe('getSingleResponse', () => {
        it('should create and return a new user successfully', async () => {
            const mockUser = { id: 1, name: 'John Doe' };
            mockUserService.createUser = jest.fn().mockResolvedValue(mockUser);
            const req = {
                body: { name: 'John Doe' },
            };
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };
            await homeController.getSingleResponse(req, res);
            expect(mockUserService.createUser).toHaveBeenCalledWith({
                name: 'John Doe',
            });
            expect(res.status).toHaveBeenCalledWith(201);
            expect(res.json).toHaveBeenCalledWith({
                data: expect.any(Object),
                error: {},
                success: true,
                message: 'User created successfully',
            });
        });
        it('should handle validation errors', async () => {
            const error = new Error('Validation failed');
            error.status = 422;
            mockUserService.createUser = jest.fn().mockRejectedValue(error);
            const req = {
                body: { name: '' },
            };
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };
            await homeController.getSingleResponse(req, res);
            expect(res.status).toHaveBeenCalledWith(422);
            expect(res.json).toHaveBeenCalledWith({
                data: {},
                error: {
                    message: 'Validation failed',
                    code: 422,
                },
                success: false,
                message: 'Validation failed',
            });
        });
    });
    describe('getErrorResponse', () => {
        it('should throw sample exception for testing', async () => {
            const req = {};
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };
            await homeController.getErrorResponse(req, res);
            expect(res.status).toHaveBeenCalledWith(400);
            expect(res.json).toHaveBeenCalledWith({
                data: {},
                error: {
                    message: 'Test Exception',
                    code: 422,
                },
                success: false,
                message: 'Test Exception',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,