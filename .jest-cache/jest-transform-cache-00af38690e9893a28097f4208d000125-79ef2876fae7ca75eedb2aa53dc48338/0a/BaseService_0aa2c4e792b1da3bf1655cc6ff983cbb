aa52182cc47c89e1c9c271631354538a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = __importDefault(require("@config/Logger"));
const ValidationException_1 = __importDefault(require("@exceptions/ValidationException"));
const RouteException_1 = __importDefault(require("@exceptions/RouteException"));
class BaseService {
    constructor() {
        this.logger = Logger_1.default;
    }
    async execute(operation) {
        try {
            return await operation();
        }
        catch (error) {
            this.logger.error(`Service error: ${error.message}`);
            throw error;
        }
    }
    validateData(data, schema) {
        // Check if schema is a Joi ObjectSchema
        if (schema && typeof schema.validate === 'function') {
            const { error, value } = schema.validate(data, { abortEarly: false });
            if (error) {
                throw ValidationException_1.default.validation(error.details.map((e) => e.message).join(', '));
            }
            return value;
        }
        else {
            throw ValidationException_1.default.validation('Invalid validation schema');
        }
    }
    handleNotFound(message = 'Resource not found') {
        throw RouteException_1.default.notFound(message);
    }
    handleUnauthorized(message = 'Unauthorized access') {
        throw RouteException_1.default.unauthorized(message);
    }
}
exports.default = BaseService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXEZyZWVsYW5jZXJcXG5vZGVqcy1hcGktd3JhcHBlclxcc3JjXFxzZXJ2aWNlc1xcQmFzZVNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw0REFBb0M7QUFDcEMsMEZBQWtFO0FBQ2xFLGdGQUF3RDtBQUd4RCxNQUFNLFdBQVc7SUFHZjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBSSxTQUEyQjtRQUMxQyxJQUFJLENBQUM7WUFDSCxPQUFPLE1BQU0sU0FBUyxFQUFFLENBQUM7UUFDM0IsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBbUIsS0FBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDaEUsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBSSxJQUE2QixFQUFFLE1BQXdCO1FBQ3JFLHdDQUF3QztRQUN4QyxJQUFJLE1BQU0sSUFBSSxPQUFRLE1BQXVCLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQ3RFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUksTUFBdUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDeEYsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDVixNQUFNLDZCQUFtQixDQUFDLFVBQVUsQ0FDbEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNwRSxDQUFDO1lBQ0osQ0FBQztZQUNELE9BQU8sS0FBVSxDQUFDO1FBQ3BCLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSw2QkFBbUIsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUNwRSxDQUFDO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxVQUFrQixvQkFBb0I7UUFDbkQsTUFBTSx3QkFBYyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsVUFBa0IscUJBQXFCO1FBQ3hELE1BQU0sd0JBQWMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBRUQsa0JBQWUsV0FBVyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkU6XFxGcmVlbGFuY2VyXFxub2RlanMtYXBpLXdyYXBwZXJcXHNyY1xcc2VydmljZXNcXEJhc2VTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25TY2hlbWEgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJ0Bjb25maWcvTG9nZ2VyJztcbmltcG9ydCBWYWxpZGF0aW9uRXhjZXB0aW9uIGZyb20gJ0BleGNlcHRpb25zL1ZhbGlkYXRpb25FeGNlcHRpb24nO1xuaW1wb3J0IFJvdXRlRXhjZXB0aW9uIGZyb20gJ0BleGNlcHRpb25zL1JvdXRlRXhjZXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFNjaGVtYSwgVmFsaWRhdGlvbkVycm9ySXRlbSB9IGZyb20gJ2pvaSc7XG5cbmNsYXNzIEJhc2VTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIGxvZ2dlcjogdHlwZW9mIExvZ2dlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxvZ2dlciA9IExvZ2dlcjtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGU8VD4ob3BlcmF0aW9uOiAoKSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBvcGVyYXRpb24oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFNlcnZpY2UgZXJyb3I6ICR7KGVycm9yIGFzIEVycm9yKS5tZXNzYWdlfWApO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVEYXRhPFQ+KGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBzY2hlbWE6IFZhbGlkYXRpb25TY2hlbWEpOiBUIHtcbiAgICAvLyBDaGVjayBpZiBzY2hlbWEgaXMgYSBKb2kgT2JqZWN0U2NoZW1hXG4gICAgaWYgKHNjaGVtYSAmJiB0eXBlb2YgKHNjaGVtYSBhcyBPYmplY3RTY2hlbWEpLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCB7IGVycm9yLCB2YWx1ZSB9ID0gKHNjaGVtYSBhcyBPYmplY3RTY2hlbWEpLnZhbGlkYXRlKGRhdGEsIHsgYWJvcnRFYXJseTogZmFsc2UgfSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgVmFsaWRhdGlvbkV4Y2VwdGlvbi52YWxpZGF0aW9uKFxuICAgICAgICAgIGVycm9yLmRldGFpbHMubWFwKChlOiBWYWxpZGF0aW9uRXJyb3JJdGVtKSA9PiBlLm1lc3NhZ2UpLmpvaW4oJywgJylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSBhcyBUO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBWYWxpZGF0aW9uRXhjZXB0aW9uLnZhbGlkYXRpb24oJ0ludmFsaWQgdmFsaWRhdGlvbiBzY2hlbWEnKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVOb3RGb3VuZChtZXNzYWdlOiBzdHJpbmcgPSAnUmVzb3VyY2Ugbm90IGZvdW5kJyk6IG5ldmVyIHtcbiAgICB0aHJvdyBSb3V0ZUV4Y2VwdGlvbi5ub3RGb3VuZChtZXNzYWdlKTtcbiAgfVxuXG4gIGhhbmRsZVVuYXV0aG9yaXplZChtZXNzYWdlOiBzdHJpbmcgPSAnVW5hdXRob3JpemVkIGFjY2VzcycpOiBuZXZlciB7XG4gICAgdGhyb3cgUm91dGVFeGNlcHRpb24udW5hdXRob3JpemVkKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VTZXJ2aWNlO1xuIl0sInZlcnNpb24iOjN9