{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\BaseService.ts","mappings":";;;;;AACA,4DAAoC;AACpC,0FAAkE;AAClE,gFAAwD;AAGxD,MAAM,WAAW;IAGf;QACE,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,OAAO,CAAI,SAA2B;QAC1C,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAmB,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;YAChE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,YAAY,CAAI,IAA6B,EAAE,MAAwB;QACrE,wCAAwC;QACxC,IAAI,MAAM,IAAI,OAAQ,MAAuB,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;YACtE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAI,MAAuB,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YACxF,IAAI,KAAK,EAAE,CAAC;gBACV,MAAM,6BAAmB,CAAC,UAAU,CAClC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAsB,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CACpE,CAAC;YACJ,CAAC;YACD,OAAO,KAAU,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,MAAM,6BAAmB,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,cAAc,CAAC,UAAkB,oBAAoB;QACnD,MAAM,wBAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,kBAAkB,CAAC,UAAkB,qBAAqB;QACxD,MAAM,wBAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\BaseService.ts"],"sourcesContent":["import { ValidationSchema } from '../types';\nimport Logger from '@config/Logger';\nimport ValidationException from '@exceptions/ValidationException';\nimport RouteException from '@exceptions/RouteException';\nimport { ObjectSchema, ValidationErrorItem } from 'joi';\n\nclass BaseService {\n  protected logger: typeof Logger;\n\n  constructor() {\n    this.logger = Logger;\n  }\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    try {\n      return await operation();\n    } catch (error) {\n      this.logger.error(`Service error: ${(error as Error).message}`);\n      throw error;\n    }\n  }\n\n  validateData<T>(data: Record<string, unknown>, schema: ValidationSchema): T {\n    // Check if schema is a Joi ObjectSchema\n    if (schema && typeof (schema as ObjectSchema).validate === 'function') {\n      const { error, value } = (schema as ObjectSchema).validate(data, { abortEarly: false });\n      if (error) {\n        throw ValidationException.validation(\n          error.details.map((e: ValidationErrorItem) => e.message).join(', ')\n        );\n      }\n      return value as T;\n    } else {\n      throw ValidationException.validation('Invalid validation schema');\n    }\n  }\n\n  handleNotFound(message: string = 'Resource not found'): never {\n    throw RouteException.notFound(message);\n  }\n\n  handleUnauthorized(message: string = 'Unauthorized access'): never {\n    throw RouteException.unauthorized(message);\n  }\n}\n\nexport default BaseService;\n"],"version":3}