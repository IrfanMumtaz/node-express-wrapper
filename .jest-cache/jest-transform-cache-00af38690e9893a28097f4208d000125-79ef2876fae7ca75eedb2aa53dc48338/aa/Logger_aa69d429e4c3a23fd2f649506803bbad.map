{"file":"E:\\Freelancer\\nodejs-api-wrapper\\config\\Logger.ts","mappings":";;;;;AAAA,sDAA8B;AAC9B,qCAAmC;AAEnC,MAAM,MAAM;IAGV;QACE,IAAI,CAAC,MAAM,GAAG,iBAAO,CAAC,YAAY,CAAC;YACjC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,MAAM;YACtC,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,wBAAwB;YACpD,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;gBACtD,OAAO,GAAG,SAAS,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;YAC7C,CAAC,CAAC,CACH;YACD,UAAU,EAAE;gBACV,oCAAoC;gBACpC,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,CAAC;oBAC7B,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,iBAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CACxB;iBACF,CAAC;gBACF,gCAAgC;gBAChC,IAAI,CAAC,WAAW,EAAE;aACnB;SACF,CAAC,CAAC;IACL,CAAC;IAEO,WAAW;QACjB,MAAM,wBAAwB,GAAG,IAAI,iBAAO,CAAC,UAAU,CAAC,eAAe,CAAC;YACtE,QAAQ,EAAE,iBAAiB;YAC3B,WAAW,EAAE,YAAY;YACzB,aAAa,EAAE,IAAI;YACnB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,OAAO,wBAAwB,CAAC;IAClC,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;CACF;AAED,kBAAe,IAAI,MAAM,EAAE,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\config\\Logger.ts"],"sourcesContent":["import winston from 'winston';\nimport 'winston-daily-rotate-file';\n\nclass Logger {\n  private logger: winston.Logger;\n\n  constructor() {\n    this.logger = winston.createLogger({\n      level: process.env.LOG_LEVEL || 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(), // Add timestamp to logs\n        winston.format.printf(({ timestamp, level, message }) => {\n          return `${timestamp} ${level}: ${message}`;\n        })\n      ),\n      transports: [\n        // Console transport for development\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          ),\n        }),\n        // File transport for production\n        this.dailyRotate(),\n      ],\n    });\n  }\n\n  private dailyRotate(): winston.transport {\n    const dailyRotateFileTransport = new winston.transports.DailyRotateFile({\n      filename: 'logs/%DATE%.log',\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '14d',\n    });\n\n    return dailyRotateFileTransport;\n  }\n\n  info(message: string): void {\n    this.logger.info(message);\n  }\n\n  error(message: string): void {\n    this.logger.error(message);\n  }\n\n  warn(message: string): void {\n    this.logger.warn(message);\n  }\n\n  debug(message: string): void {\n    this.logger.debug(message);\n  }\n}\n\nexport default new Logger();\n"],"version":3}