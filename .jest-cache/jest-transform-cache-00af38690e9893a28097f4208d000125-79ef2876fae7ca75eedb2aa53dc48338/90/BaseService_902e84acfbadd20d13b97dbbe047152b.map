{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\BaseService.ts","mappings":";;;;;AACA,4DAAoC;AACpC,0FAAkE;AAClE,gFAAwD;AAExD,MAAM,WAAW;IAGf;QACE,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,OAAO,CAAI,SAA8B;QAC7C,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAmB,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;YAChE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,YAAY,CAAI,IAAS,EAAE,MAAwB;QACjD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACtE,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,6BAAmB,CAAC,UAAU,CAClC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CACzC,CAAC;QACJ,CAAC;QACD,OAAO,KAAU,CAAC;IACpB,CAAC;IAED,cAAc,CAAC,UAAkB,oBAAoB;QACnD,MAAM,wBAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,kBAAkB,CAAC,UAAkB,qBAAqB;QACxD,MAAM,wBAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\services\\BaseService.ts"],"sourcesContent":["import { ServiceOperation, ValidationSchema } from '../types';\nimport Logger from '@config/Logger';\nimport ValidationException from '@exceptions/ValidationException';\nimport RouteException from '@exceptions/RouteException';\n\nclass BaseService {\n  protected logger: typeof Logger;\n\n  constructor() {\n    this.logger = Logger;\n  }\n\n  async execute<T>(operation: ServiceOperation<T>): Promise<T> {\n    try {\n      return await operation();\n    } catch (error) {\n      this.logger.error(`Service error: ${(error as Error).message}`);\n      throw error;\n    }\n  }\n\n  validateData<T>(data: any, schema: ValidationSchema): T {\n    const { error, value } = schema.validate(data, { abortEarly: false });\n    if (error) {\n      throw ValidationException.validation(\n        error.details.map((e: any) => e.message)\n      );\n    }\n    return value as T;\n  }\n\n  handleNotFound(message: string = 'Resource not found'): never {\n    throw RouteException.notFound(message);\n  }\n\n  handleUnauthorized(message: string = 'Unauthorized access'): never {\n    throw RouteException.unauthorized(message);\n  }\n}\n\nexport default BaseService;\n"],"version":3}