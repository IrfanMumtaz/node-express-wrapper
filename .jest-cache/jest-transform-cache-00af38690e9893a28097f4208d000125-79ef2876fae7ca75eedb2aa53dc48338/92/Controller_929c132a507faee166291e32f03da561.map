{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\controllers\\Controller.ts","mappings":";;AAOA,MAAM,UAAU;IACd,QAAQ,CACN,GAAoB,EACpB,IAAS,EACT,OAAe,GAAG,EAClB,UAAkB,sBAAsB;QAExC,MAAM,QAAQ,GAAgB;YAC5B,IAAI;YACJ,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,IAAI;YACb,OAAO;SACR,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CACH,GAAoB,EACpB,KAAsB,EACtB,OAAe,GAAG;QAElB,MAAM,QAAQ,GAAgB;YAC5B,IAAI,EAAE,EAAE;YACR,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,IAAI;aACzB;YACD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,uBAAuB;SAClD,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,WAAW,CACf,GAAmB,EACnB,GAAoB,EACpB,OAAqE;QAErE,IAAI,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,GAAG,GAAG,KAAwB,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;CACF;AAED,kBAAe,UAAU,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\controllers\\Controller.ts"],"sourcesContent":["import {\n  ExpressRequest,\n  ExpressResponse,\n  ApiResponse,\n  ControllerError,\n} from '../types';\n\nclass Controller {\n  response(\n    res: ExpressResponse,\n    data: any,\n    code: number = 200,\n    message: string = 'Operation Successful'\n  ): void {\n    const response: ApiResponse = {\n      data,\n      error: {},\n      success: true,\n      message,\n    };\n    res.status(code).json(response);\n  }\n\n  error(\n    res: ExpressResponse,\n    error: ControllerError,\n    code: number = 500\n  ): void {\n    const response: ApiResponse = {\n      data: {},\n      error: {\n        message: error.message,\n        code: error.code || code,\n      },\n      success: false,\n      message: error.message || 'Internal Server Error',\n    };\n    res.status(code).json(response);\n  }\n\n  async handleAsync(\n    req: ExpressRequest,\n    res: ExpressResponse,\n    handler: (req: ExpressRequest, res: ExpressResponse) => Promise<void>\n  ): Promise<void> {\n    try {\n      await handler(req, res);\n    } catch (error) {\n      const err = error as ControllerError;\n      this.error(res, err, err.status || 500);\n    }\n  }\n}\n\nexport default Controller;\n"],"version":3}