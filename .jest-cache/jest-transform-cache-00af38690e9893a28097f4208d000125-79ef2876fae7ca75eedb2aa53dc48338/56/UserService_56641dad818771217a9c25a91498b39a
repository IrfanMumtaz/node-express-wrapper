45e9aca633383cb46add286b9c729e46
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseService_1 = __importDefault(require("./BaseService"));
const User_1 = __importDefault(require("@models/User"));
const UserRequest_1 = __importDefault(require("@requests/UserRequest"));
class UserService extends BaseService_1.default {
    async getAllUsers() {
        return this.execute(async () => {
            const users = await User_1.default.query().get();
            return users.toArray();
        });
    }
    async createUser(userData) {
        return this.execute(async () => {
            // Validate input data
            const validatedData = this.validateData(userData, UserRequest_1.default);
            // Check if user already exists
            const existingUser = await User_1.default.query()
                .where('name', validatedData.name)
                .first();
            if (existingUser) {
                throw new Error('User with this name already exists');
            }
            // Create new user
            const user = new User_1.default(validatedData);
            const savedUser = await user.save();
            return savedUser;
        });
    }
    async getUserById(id) {
        return this.execute(async () => {
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            return user;
        });
    }
    async updateUser(id, userData) {
        return this.execute(async () => {
            const validatedData = this.validateData(userData, UserRequest_1.default);
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            // Update user
            Object.assign(user, validatedData);
            const savedUser = await user.save();
            return savedUser;
        });
    }
    async deleteUser(id) {
        return this.execute(async () => {
            const user = await User_1.default.query().findById(id);
            if (!user) {
                this.handleNotFound('User not found');
            }
            await user.delete();
            return { message: 'User deleted successfully' };
        });
    }
}
exports.default = UserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXEZyZWVsYW5jZXJcXG5vZGVqcy1hcGktd3JhcHBlclxcc3JjXFxzZXJ2aWNlc1xcVXNlclNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBd0M7QUFDeEMsd0RBQWdDO0FBQ2hDLHdFQUFnRDtBQUdoRCxNQUFNLFdBQVksU0FBUSxxQkFBVztJQUNuQyxLQUFLLENBQUMsV0FBVztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QyxPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQWlCLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUE0QjtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDN0Isc0JBQXNCO1lBQ3RCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQVksUUFBUSxFQUFFLHFCQUFrQixDQUFDLENBQUM7WUFFakYsK0JBQStCO1lBQy9CLE1BQU0sWUFBWSxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRTtpQkFDcEMsS0FBSyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDO2lCQUNqQyxLQUFLLEVBQUUsQ0FBQztZQUVYLElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztZQUN4RCxDQUFDO1lBRUQsa0JBQWtCO1lBQ2xCLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BDLE9BQU8sU0FBaUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQVU7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU3QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7WUFFRCxPQUFPLElBQWlCLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FDZCxFQUFVLEVBQ1YsUUFBNEI7UUFFNUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzdCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQVksUUFBUSxFQUFFLHFCQUFrQixDQUFDLENBQUM7WUFFakYsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUVELGNBQWM7WUFDZCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNuQyxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQyxPQUFPLFNBQWlDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFVO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFN0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNWLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN4QyxDQUFDO1lBRUQsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEIsT0FBTyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsV0FBVyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkU6XFxGcmVlbGFuY2VyXFxub2RlanMtYXBpLXdyYXBwZXJcXHNyY1xcc2VydmljZXNcXFVzZXJTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlU2VydmljZSBmcm9tICcuL0Jhc2VTZXJ2aWNlJztcbmltcG9ydCBVc2VyIGZyb20gJ0Btb2RlbHMvVXNlcic7XG5pbXBvcnQgVXNlclJlcXVlc3QgZnJvbSAnQHJlcXVlc3RzL1VzZXJSZXF1ZXN0JztcbmltcG9ydCB7IFVzZXJNb2RlbCB9IGZyb20gJy4uL3R5cGVzJztcblxuY2xhc3MgVXNlclNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGFzeW5jIGdldEFsbFVzZXJzKCk6IFByb21pc2U8VXNlck1vZGVsW10+IHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlci5xdWVyeSgpLmdldCgpO1xuICAgICAgcmV0dXJuIHVzZXJzLnRvQXJyYXkoKSBhcyBVc2VyTW9kZWxbXTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGE6IFBhcnRpYWw8VXNlck1vZGVsPik6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICAvLyBWYWxpZGF0ZSBpbnB1dCBkYXRhXG4gICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gdGhpcy52YWxpZGF0ZURhdGE8VXNlck1vZGVsPih1c2VyRGF0YSwgVXNlclJlcXVlc3QgYXMgYW55KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAgIC53aGVyZSgnbmFtZScsIHZhbGlkYXRlZERhdGEubmFtZSlcbiAgICAgICAgLmZpcnN0KCk7XG5cbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBuZXcgdXNlclxuICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHZhbGlkYXRlZERhdGEpO1xuICAgICAgY29uc3Qgc2F2ZWRVc2VyID0gYXdhaXQgdXNlci5zYXZlKCk7XG4gICAgICByZXR1cm4gc2F2ZWRVc2VyIGFzIHVua25vd24gYXMgVXNlck1vZGVsO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0VXNlckJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpLmZpbmRCeUlkKGlkKTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlTm90Rm91bmQoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1c2VyIGFzIFVzZXJNb2RlbDtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVVzZXIoXG4gICAgaWQ6IG51bWJlcixcbiAgICB1c2VyRGF0YTogUGFydGlhbDxVc2VyTW9kZWw+XG4gICk6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gdGhpcy52YWxpZGF0ZURhdGE8VXNlck1vZGVsPih1c2VyRGF0YSwgVXNlclJlcXVlc3QgYXMgYW55KTtcblxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIucXVlcnkoKS5maW5kQnlJZChpZCk7XG5cbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICB0aGlzLmhhbmRsZU5vdEZvdW5kKCdVc2VyIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgdXNlclxuICAgICAgT2JqZWN0LmFzc2lnbih1c2VyLCB2YWxpZGF0ZWREYXRhKTtcbiAgICAgIGNvbnN0IHNhdmVkVXNlciA9IGF3YWl0IHVzZXIuc2F2ZSgpO1xuICAgICAgcmV0dXJuIHNhdmVkVXNlciBhcyB1bmtub3duIGFzIFVzZXJNb2RlbDtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVVzZXIoaWQ6IG51bWJlcik6IFByb21pc2U8eyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIucXVlcnkoKS5maW5kQnlJZChpZCk7XG5cbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICB0aGlzLmhhbmRsZU5vdEZvdW5kKCdVc2VyIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB1c2VyLmRlbGV0ZSgpO1xuICAgICAgcmV0dXJuIHsgbWVzc2FnZTogJ1VzZXIgZGVsZXRlZCBzdWNjZXNzZnVsbHknIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlclNlcnZpY2U7XG4iXSwidmVyc2lvbiI6M30=