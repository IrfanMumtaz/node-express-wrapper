{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\container\\Container.ts","mappings":";;AAMA,MAAM,SAAS;IAAf;QACU,aAAQ,GAA4C,IAAI,GAAG,EAAE,CAAC;QAC9D,cAAS,GAA2C,IAAI,GAAG,EAAE,CAAC;IAsCxE,CAAC;IApCC,QAAQ,CAAC,UAA6B,EAAE,OAAuB;QAC7D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,iBAAiB,CACf,UAA6B,EAC7B,QAAyB;QAEzB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO,CAAI,UAA6B;QACtC,qCAAqC;QACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAM,CAAC;QAC5C,CAAC;QAED,0BAA0B;QAC1B,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YACnC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;YAChD,MAAM,QAAQ,GAAG,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,qBAAqB;YAC9D,OAAO,QAAa,CAAC;QACvB,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,2BAA2B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACnE,CAAC;IAED,GAAG,CAAC,UAA6B;QAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACzE,CAAC;IAED,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACF;AAED,kBAAe,IAAI,SAAS,EAAE,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\container\\Container.ts"],"sourcesContent":["import {\n  ServiceIdentifier,\n  ServiceFactory,\n  ServiceInstance,\n} from '../types/container';\n\nclass Container {\n  private services: Map<ServiceIdentifier, ServiceInstance> = new Map();\n  private factories: Map<ServiceIdentifier, ServiceFactory> = new Map();\n\n  register(identifier: ServiceIdentifier, factory: ServiceFactory): void {\n    this.factories.set(identifier, factory);\n  }\n\n  registerSingleton(\n    identifier: ServiceIdentifier,\n    instance: ServiceInstance\n  ): void {\n    this.services.set(identifier, instance);\n  }\n\n  resolve<T>(identifier: ServiceIdentifier): T {\n    // Check if singleton instance exists\n    if (this.services.has(identifier)) {\n      return this.services.get(identifier) as T;\n    }\n\n    // Check if factory exists\n    if (this.factories.has(identifier)) {\n      const factory = this.factories.get(identifier)!;\n      const instance = factory();\n      this.services.set(identifier, instance); // Cache as singleton\n      return instance as T;\n    }\n\n    throw new Error(`Service not registered: ${String(identifier)}`);\n  }\n\n  has(identifier: ServiceIdentifier): boolean {\n    return this.services.has(identifier) || this.factories.has(identifier);\n  }\n\n  clear(): void {\n    this.services.clear();\n    this.factories.clear();\n  }\n}\n\nexport default new Container();\n"],"version":3}