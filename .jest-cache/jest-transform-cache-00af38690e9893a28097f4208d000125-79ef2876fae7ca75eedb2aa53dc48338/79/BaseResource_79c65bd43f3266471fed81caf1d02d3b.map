{"file":"E:\\Freelancer\\nodejs-api-wrapper\\src\\resources\\BaseResource.ts","mappings":";;;;;AAAA,sFAA8D;AAC9D,qCAAqC;AAGrC,MAAM,YAAY;IAChB,YAAY,IAAS;QACnB,IAAI,IAAI,YAAY,KAAK,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAQ,CAAC;QACrC,CAAC;aAAM,IAAI,IAAI,YAAY,oBAAU,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAQ,CAAC;QAC/C,CAAC;aAAM,IAAI,IAAI,YAAY,MAAM,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAQ,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,MAAM,2BAAiB,CAAC,gBAAgB,CACtC,0DAA0D,CAC3D,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,SAAS,CAAC,IAAW;QAC3B,IAAK,IAAI,CAAC,WAAmB,CAAC,IAAI,EAAE,CAAC;YAClC,IAAY,CAAE,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAC7D,IAAI,CAAC,WAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CACxC,CAAC;YACF,OAAO,IAAW,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,WAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAEO,UAAU,CAAC,IAAS;QAC1B,IAAK,IAAI,CAAC,WAAmB,CAAC,IAAI,EAAE,CAAC;YAClC,IAAY,CAAE,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC,GAC3C,IAAI,CAAC,WACN,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,OAAO,IAAW,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,OAAQ,IAAI,CAAC,WAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","names":[],"sources":["E:\\Freelancer\\nodejs-api-wrapper\\src\\resources\\BaseResource.ts"],"sourcesContent":["import ResponseException from '@exceptions/ResponseException';\nimport { Collection } from 'sutando';\nimport { ResourceData, ResourceCollection } from '../types';\n\nclass BaseResource {\n  constructor(data: any) {\n    if (data instanceof Array) {\n      return this.dataArray(data) as any;\n    } else if (data instanceof Collection) {\n      return this.dataArray(data.toArray()) as any;\n    } else if (data instanceof Object) {\n      return this.dataObject(data) as any;\n    } else {\n      throw ResponseException.dataTypeMismatch(\n        'This operation requires data type to be Object or Array.'\n      );\n    }\n  }\n\n  private dataArray(data: any[]): ResourceCollection | ResourceData[] {\n    if ((this.constructor as any).wrap) {\n      (this as any)[(this.constructor as any).wrap] = data.map(item =>\n        (this.constructor as any).setData(item)\n      );\n      return this as any;\n    } else {\n      return data.map(item => (this.constructor as any).setData(item));\n    }\n  }\n\n  private dataObject(data: any): ResourceData | void {\n    if ((this.constructor as any).wrap) {\n      (this as any)[(this.constructor as any).wrap] = (\n        this.constructor as any\n      ).setData(data);\n      return this as any;\n    } else {\n      return (this.constructor as any).setData(data);\n    }\n  }\n}\n\nexport default BaseResource;\n"],"version":3}